/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id("com.diffplug.spotless") version "6.24.0"
    id("net.researchgate.release") version "3.0.2"
    id('org.sonatype.gradle.plugins.scan') version '2.6.2'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://download.java.net/maven/2/')
    }

    maven {
        url = uri('https://repository.jboss.org/nexus/content/groups/public-jboss/')
    }

    maven {
        url = uri('https://repo.springsource.org/release')
    }

    maven {
        url = uri('https://download.eclipse.org/rt/eclipselink/maven.repo')
    }

    maven {
        url = uri('https://repository.springsource.com/maven/bundles/release')
    }

    maven {
        url = uri('https://repository.springsource.com/maven/bundles/external')
    }

    maven {
        url = uri('https://repository.springsource.com/maven/bundles/milestone')
    }

    maven {
        url = uri('https://repository.springsource.com/maven/bundles/snapshot')
    }

    maven {
        url = uri('https://repo.eclipse.org/content/groups/releases/')
    }

    maven {
        url = uri('https://repo.spring.io/plugins-release/')
    }

    maven {
        url = uri('https://dist.wso2.org/maven2/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
}

dependencies {
    api "commons-io:commons-io:${commonsIOVersion}"
    implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
    api "org.apache.commons:commons-lang3:${commonsLangVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jApiVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackClassicVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

group = 'com.alphasystem'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform {}
}

nexusIQScan {
    username = System.getProperty("username")
    password = System.getProperty("password")
    serverUrl = System.getProperty("host")
    applicationId = 'alphasystem-commons'
}